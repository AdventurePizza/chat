/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "addOrder(address,uint256,uint256)": FunctionFragment;
    "addOrderPartnered(address,uint256,uint256,uint256,tuple[])": FunctionFragment;
    "addOrderWithPipe(address,uint256,uint256,tuple[])": FunctionFragment;
    "addPartner(address)": FunctionFragment;
    "buyOrder(address,uint256)": FunctionFragment;
    "buyOrderPartnered(address,uint256,address)": FunctionFragment;
    "cancel()": FunctionFragment;
    "cancelOrder(address,uint256)": FunctionFragment;
    "contractAddressByIndex(address,uint256)": FunctionFragment;
    "contractAddressByOwner(address,address)": FunctionFragment;
    "contractIndexByAddress(address,address)": FunctionFragment;
    "countContractsByOwner(address)": FunctionFragment;
    "countPipes(address,uint256)": FunctionFragment;
    "countTokens(address,address)": FunctionFragment;
    "orders(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "partners(address)": FunctionFragment;
    "pipes(address,uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tokenIdByIndex(address,address,uint256)": FunctionFragment;
    "tokenIndexById(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addOrder",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrderPartnered",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      { toAddress: string; sharePerc: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addOrderWithPipe",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      { toAddress: string; sharePerc: BigNumberish }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "addPartner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyOrderPartnered",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddressByIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractAddressByOwner",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractIndexByAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "countContractsByOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "countPipes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "countTokens",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "orders",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "partners", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pipes",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIdByIndex",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIndexById",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOrderPartnered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOrderWithPipe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPartner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buyOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyOrderPartnered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddressByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractAddressByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractIndexByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countContractsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "countPipes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "countTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "partners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pipes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIdByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIndexById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "OrderBought(address,uint256,uint256,address,address)": EventFragment;
    "OrderCanceled(address,uint256,address)": EventFragment;
    "OrderPlaced(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OrderBought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderPlaced"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Marketplace extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketplaceInterface;

  functions: {
    addOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOrder(address,uint256,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOrderPartnered(address,uint256,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addOrderWithPipe(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addOrderWithPipe(address,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPartner(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPartner(address)"(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "buyOrderPartnered(address,uint256,address)"(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancel()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "cancelOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractAddressByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "contractAddressByIndex(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contractAddressByOwner(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "contractAddressByOwner(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contractIndexByAddress(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "contractIndexByAddress(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countContractsByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "countContractsByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countPipes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "countPipes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    countTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "countTokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    orders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
        contractAddress: string;
        isPartnered: boolean;
        percPartner: BigNumber;
      }
    >;

    "orders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
        contractAddress: string;
        isPartnered: boolean;
        percPartner: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    partners(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "partners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pipes(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { toAddress: string; sharePerc: BigNumber }
    >;

    "pipes(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { toAddress: string; sharePerc: BigNumber }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenIdByIndex(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenIdByIndex(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenIndexById(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "tokenIndexById(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addOrder(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOrder(address,uint256,uint256)"(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOrderPartnered(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    partnerPerc: BigNumberish,
    pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOrderPartnered(address,uint256,uint256,uint256,tuple[])"(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    partnerPerc: BigNumberish,
    pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addOrderWithPipe(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addOrderWithPipe(address,uint256,uint256,tuple[])"(
    contractAddress: string,
    tokenId: BigNumberish,
    price: BigNumberish,
    pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPartner(
    partnerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPartner(address)"(
    partnerAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyOrder(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyOrder(address,uint256)"(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyOrderPartnered(
    contractAddress: string,
    tokenId: BigNumberish,
    partnerAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "buyOrderPartnered(address,uint256,address)"(
    contractAddress: string,
    tokenId: BigNumberish,
    partnerAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancel()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "cancelOrder(address,uint256)"(
    contractAddress: string,
    tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractAddressByIndex(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "contractAddressByIndex(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  contractAddressByOwner(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "contractAddressByOwner(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contractIndexByAddress(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "contractIndexByAddress(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countContractsByOwner(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countContractsByOwner(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countPipes(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countPipes(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  countTokens(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "countTokens(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  orders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
      tokenId: BigNumber;
      price: BigNumber;
      ownerAddress: string;
      contractAddress: string;
      isPartnered: boolean;
      percPartner: BigNumber;
    }
  >;

  "orders(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
      tokenId: BigNumber;
      price: BigNumber;
      ownerAddress: string;
      contractAddress: string;
      isPartnered: boolean;
      percPartner: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  partners(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "partners(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pipes(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { toAddress: string; sharePerc: BigNumber }>;

  "pipes(address,uint256,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { toAddress: string; sharePerc: BigNumber }>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenIdByIndex(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenIdByIndex(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenIndexById(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "tokenIndexById(address,address,uint256)"(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "addOrder(address,uint256,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addOrderPartnered(address,uint256,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addOrderWithPipe(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    "addOrderWithPipe(address,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: CallOverrides
    ): Promise<void>;

    addPartner(
      partnerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addPartner(address)"(
      partnerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "buyOrderPartnered(address,uint256,address)"(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    "cancel()"(overrides?: CallOverrides): Promise<void>;

    cancelOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contractAddressByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "contractAddressByIndex(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contractAddressByOwner(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "contractAddressByOwner(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contractIndexByAddress(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractIndexByAddress(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countContractsByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countContractsByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPipes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPipes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
        contractAddress: string;
        isPartnered: boolean;
        percPartner: BigNumber;
      }
    >;

    "orders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, boolean, BigNumber] & {
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
        contractAddress: string;
        isPartnered: boolean;
        percPartner: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    partners(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "partners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pipes(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { toAddress: string; sharePerc: BigNumber }
    >;

    "pipes(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber] & { toAddress: string; sharePerc: BigNumber }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    tokenIdByIndex(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdByIndex(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIndexById(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIndexById(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OrderBought(
      contractAddress: null,
      tokenId: null,
      price: null,
      ownerAddress: null,
      buyerAddress: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        contractAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
        buyerAddress: string;
      }
    >;

    OrderCanceled(
      contractAddress: null,
      tokenId: null,
      ownerAddress: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { contractAddress: string; tokenId: BigNumber; ownerAddress: string }
    >;

    OrderPlaced(
      contractAddress: null,
      tokenId: null,
      price: null,
      ownerAddress: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        contractAddress: string;
        tokenId: BigNumber;
        price: BigNumber;
        ownerAddress: string;
      }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOrder(address,uint256,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOrderPartnered(address,uint256,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addOrderWithPipe(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addOrderWithPipe(address,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPartner(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPartner(address)"(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "buyOrderPartnered(address,uint256,address)"(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancel()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "cancelOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractAddressByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractAddressByIndex(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractAddressByOwner(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractAddressByOwner(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contractIndexByAddress(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "contractIndexByAddress(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countContractsByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countContractsByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countPipes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countPipes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    countTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "countTokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "orders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    partners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "partners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pipes(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pipes(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenIdByIndex(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIdByIndex(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIndexById(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenIndexById(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOrder(address,uint256,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOrderPartnered(address,uint256,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      partnerPerc: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addOrderWithPipe(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addOrderWithPipe(address,uint256,uint256,tuple[])"(
      contractAddress: string,
      tokenId: BigNumberish,
      price: BigNumberish,
      pipesArr: { toAddress: string; sharePerc: BigNumberish }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPartner(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPartner(address)"(
      partnerAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyOrderPartnered(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "buyOrderPartnered(address,uint256,address)"(
      contractAddress: string,
      tokenId: BigNumberish,
      partnerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancel()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "cancelOrder(address,uint256)"(
      contractAddress: string,
      tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractAddressByIndex(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractAddressByIndex(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractAddressByOwner(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractAddressByOwner(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractIndexByAddress(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "contractIndexByAddress(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countContractsByOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countContractsByOwner(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countPipes(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countPipes(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    countTokens(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "countTokens(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "orders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    partners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "partners(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pipes(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pipes(address,uint256,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenIdByIndex(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIdByIndex(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIndexById(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenIndexById(address,address,uint256)"(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
